{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "54b50197-1038-4309-8824-2684adeef9b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-01-24 12:15:39.774 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.173 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-01-24 12:15:40.174 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.175 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.176 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.177 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.177 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.179 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.179 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.180 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.182 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-24 12:15:40.183 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "from spellchecker import SpellChecker\n",
    "import io\n",
    "\n",
    "def load_excel(file):\n",
    "    \"\"\"Load the uploaded Excel file.\"\"\"\n",
    "    return pd.read_excel(file, sheet_name=None)\n",
    "\n",
    "def spell_check_column(data, spell):\n",
    "    \"\"\"Check spelling errors in each cell of a DataFrame.\"\"\"\n",
    "    errors = {}\n",
    "    for col in data.columns:\n",
    "        for value in data[col].dropna():\n",
    "            if isinstance(value, str):\n",
    "                for word in value.split():\n",
    "                    if word not in spell:\n",
    "                        errors[word] = spell.candidates(word)\n",
    "    return errors\n",
    "\n",
    "def correct_spelling(data, corrections):\n",
    "    \"\"\"Apply corrections to the DataFrame.\"\"\"\n",
    "    for col in data.columns:\n",
    "        data[col] = data[col].apply(lambda x: replace_words(x, corrections) if isinstance(x, str) else x)\n",
    "    return data\n",
    "\n",
    "def replace_words(text, corrections):\n",
    "    \"\"\"Replace misspelled words in a text based on corrections.\"\"\"\n",
    "    words = text.split()\n",
    "    corrected = [corrections[word] if word in corrections else word for word in words]\n",
    "    return \" \".join(corrected)\n",
    "\n",
    "# Streamlit UI\n",
    "st.title(\"Excel Spell Checker\")\n",
    "st.write(\"Upload an Excel file to check for spelling errors.\")\n",
    "\n",
    "uploaded_file = st.file_uploader(\"Choose an Excel file\", type=[\"xlsx\"])\n",
    "\n",
    "if uploaded_file:\n",
    "    sheets = load_excel(uploaded_file)\n",
    "    st.write(\"Uploaded Sheets:\")\n",
    "    for sheet_name, sheet_data in sheets.items():\n",
    "        st.write(f\"### {sheet_name}\")\n",
    "        st.dataframe(sheet_data)\n",
    "\n",
    "    # Initialize SpellChecker\n",
    "    spell = SpellChecker()\n",
    "    spelling_errors = {}\n",
    "\n",
    "    # Process each sheet\n",
    "    for sheet_name, sheet_data in sheets.items():\n",
    "        errors = spell_check_column(sheet_data, spell)\n",
    "        spelling_errors[sheet_name] = errors\n",
    "\n",
    "    if spelling_errors:\n",
    "        st.write(\"### Identified Spelling Errors\")\n",
    "        all_corrections = {}\n",
    "        for sheet_name, errors in spelling_errors.items():\n",
    "            st.write(f\"**{sheet_name}**\")\n",
    "            corrections = {}\n",
    "            for word, suggestions in errors.items():\n",
    "                if suggestions:\n",
    "                    correction = st.selectbox(\n",
    "                        f\"Select correction for '{word}' in {sheet_name}\",\n",
    "                        options=[word] + list(suggestions),\n",
    "                        key=f\"{sheet_name}-{word}\"\n",
    "                    )\n",
    "                    corrections[word] = correction\n",
    "            all_corrections[sheet_name] = corrections\n",
    "\n",
    "        # Apply corrections\n",
    "        if st.button(\"Apply Corrections\"):\n",
    "            corrected_sheets = {}\n",
    "            for sheet_name, sheet_data in sheets.items():\n",
    "                corrected_data = correct_spelling(sheet_data, all_corrections.get(sheet_name, {}))\n",
    "                corrected_sheets[sheet_name] = corrected_data\n",
    "\n",
    "            # Save the corrected file\n",
    "            corrected_file = io.BytesIO()\n",
    "            with pd.ExcelWriter(corrected_file, engine=\"openpyxl\") as writer:\n",
    "                for sheet_name, corrected_data in corrected_sheets.items():\n",
    "                    corrected_data.to_excel(writer, sheet_name=sheet_name, index=False)\n",
    "\n",
    "            corrected_file.seek(0)\n",
    "            st.download_button(\n",
    "                label=\"Download Corrected File\",\n",
    "                data=corrected_file,\n",
    "                file_name=\"corrected_file.xlsx\",\n",
    "                mime=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n",
    "            )\n",
    "            st.success(\"Corrections applied and file ready for download!\")\n",
    "    else:\n",
    "        st.write(\"No spelling errors detected.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c368f89a-8164-4d99-b7f1-f6a206841da6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
